{"version":3,"file":"formie-integration-settings.64ec57f3.js","sources":["../../src/js/components/IntegrationConnect.vue","../../src/js/formie-integration-settings.js"],"sourcesContent":["<template>\n    <div class=\"field lightswitch-field\">\n        <div class=\"heading\">\n            <span class=\"status\" :class=\"statusClass\"></span>\n            <span>{{ t('formie', statusText) }}</span>\n        </div>\n\n        <div class=\"input ltr\">\n            <button class=\"btn small\" :class=\"{ 'fui-loading fui-loading-tiny': loading }\" :title=\"t('formie', 'Refresh')\" @click.prevent=\"refresh\">{{ t('formie', 'Refresh') }}</button>\n\n            <modal ref=\"modal\" v-model=\"showModal\" :show-header=\"false\" :show-footer=\"false\" modal-class=\"fui-integration-error-modal\" @click-outside=\"closeModal\">\n                <template #body>\n                    <div class=\"fui-dialog-close\" @click.prevent=\"closeModal\"></div>\n\n                    <div class=\"fui-error-pane error\">\n                        <div class=\"fui-error-content\">\n                            <span data-icon=\"alert\"></span>\n\n                            <span class=\"error\" v-html=\"errorMessage\"></span>\n                        </div>\n                    </div>\n                </template>\n            </modal>\n        </div>\n    </div>\n</template>\n\n<script>\nimport Modal from '@components/Modal.vue';\n\nexport default {\n    name: 'IntegrationConnect',\n\n    components: {\n        Modal,\n    },\n\n    props: {\n        connected: {\n            type: Boolean,\n        },\n    },\n\n    data() {\n        return {\n            statusText: '',\n            showModal: false,\n            error: false,\n            errorMessage: '',\n            loading: false,\n        };\n    },\n\n    computed: {\n        statusClass() {\n            if (this.statusText === 'Error') {\n                return 'off';\n            }\n\n            if (this.statusText === 'Connected') {\n                return 'on';\n            }\n\n            return '';\n        },\n    },\n\n    created() {\n        this.statusText = this.connected ? 'Connected' : 'Not connected';\n    },\n\n    methods: {\n        getFormInputs() {\n            let inputs = [];\n\n            // Serialize the integration pane\n            let $form = document.getElementById('main-form');\n\n            // Check for when `allowAdminChanges = false` on production - no form\n            if (!$form) {\n                $form = document.getElementById('main');\n            }\n\n            if ($form) {\n                inputs = $form.querySelectorAll('input, select, textarea');\n            }\n\n            return inputs;\n        },\n\n        serializeForm() {\n            const values = {};\n\n            this.getFormInputs().forEach(($inputElement) => {\n                const attribute = $inputElement.getAttribute('name');\n\n                values[attribute] = $inputElement.value;\n            });\n\n            return values;\n        },\n\n        refresh() {\n            this.showModal = false;\n            this.error = false;\n            this.errorMessage = '';\n            this.loading = true;\n            this.statusText = 'Connecting...';\n\n            const data = this.serializeForm();\n\n            Craft.sendActionRequest('POST', 'formie/integrations/check-connection', { data }).then((response) => {\n                this.loading = false;\n\n                if (response.data.message) {\n                    this.error = true;\n                    this.showModal = true;\n\n                    this.errorMessage = Craft.t('formie', 'An error occurred.');\n                    this.errorMessage += `<br><br><code>${response.data.message}</code>`;\n\n                    this.statusText = 'Error';\n\n                    return;\n                }\n\n                this.statusText = 'Connected';\n            }).catch((error) => {\n                this.loading = false;\n                this.error = true;\n                this.showModal = true;\n\n                this.errorMessage = error;\n\n                if (error.response.data.message) {\n                    this.errorMessage += `<br><br><code>${error.response.data.message}</code>`;\n                }\n\n                this.statusText = 'Error';\n            });\n        },\n\n        closeModal() {\n            this.showModal = false;\n        },\n    },\n\n};\n\n</script>\n\n<style lang=\"scss\">\n\n.fui-integrations-settings {\n    .modal {\n        position: absolute;\n        width: 45%;\n        height: 350px;\n        min-width: 600px;\n        min-height: auto;\n        box-shadow: 0 0 20px rgba(63, 77, 90, 0.1);\n        border: 1px solid #cdd8e4;\n        border-radius: 10px;\n    }\n}\n\n.fui-integration-error-modal .fui-dialog-close {\n    position: absolute;\n    top: 1rem;\n    right: 1rem;\n    z-index: 3;\n}\n\n.fui-integration-error-modal .fui-error-pane {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    z-index: 1;\n}\n\n.fui-integration-error-modal .fui-error-pane {\n    align-items: center;\n    justify-content: center;\n    display: flex;\n\n    [data-icon] {\n        display: block;\n        font-size: 3em;\n        margin-bottom: 0.5rem;\n    }\n}\n\n.fui-integration-error-modal .fui-error-content {\n    text-align: center;\n    width: 90%;\n}\n\n</style>\n","// CSS needs to be imported here as it's treated as a module\nimport '@/scss/style.scss';\n\n// Accept HMR as per: https://vitejs.dev/guide/api-hmr.html\nif (import.meta.hot) {\n    import.meta.hot.accept();\n}\n\nimport { createVueApp } from './config';\n\nimport IntegrationConnect from '@components/IntegrationConnect.vue';\n\nconst app = createVueApp({\n    // Set the delimeters to not mess around with Twig\n    delimiters: ['${', '}'],\n\n    components: {\n        IntegrationConnect,\n    },\n});\n\napp.mount('.fui-integrations-settings #details .meta');\n\n// Re-broadcast the custom `vite-script-loaded` event so that we know that this module has loaded\n// Needed because when <script> tags are appended to the DOM, the `onload` handlers\n// are not executed, which happens in the field Settings page, and in slideouts\n// Do this after the document is ready to ensure proper execution order\n$(document).ready(() => {\n    document.dispatchEvent(new CustomEvent('vite-script-loaded', { detail: { path: 'src/js/formie-integration-settings.js' } }));\n});\n"],"names":["_createElementVNode","_openBlock","_createElementBlock","_normalizeClass","_toDisplayString","_createVNode"],"mappings":"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"}